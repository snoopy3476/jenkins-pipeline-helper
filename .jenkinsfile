// Demo cycle JenkinsFile for Tmax CI/CD


// config
buildStages = ['podinit', 'checkout', 'build', 'test', 'push']




// func
def gitlabBuildStage(stageName) {
	def idx = buildStages.indexOf(stageName)
	return idx.toString().padLeft(2,'0') + '. ' + stageName
}



// run stage with some pre/post jobs for the stage
def runStage(stageName, code) {
	stageRunning(stageName)
	stage(stageName) {
		try {
			code()
		} catch (error) {
			stageFailed(stageName)
			throw error
		}			
	}
	stageSuccess(stageName)
}

// stage running processing
def stageRunning(stageName) {
	updateGitlabCommitStatus name: gitlabBuildStage(stageName), state: 'running'
}

// stage success processing
def stageSuccess(stageName) {
	updateGitlabCommitStatus name: gitlabBuildStage(stageName), state: 'success'
}

// stage fail processing
def stageFailed(stageName) {
	def idx = buildStages.getIndexOf(stageName)

	// notify gitlab to current stage failed
	updateGitlabCommitStatus name: gitlabBuildStage(stageName), state: 'failed'

	// notify gitlab to canceled for all remaing stages
	idx.upto(buildStages.size() - 1, {
		updateGitlabCommitStatus name: gitlabBuildStage(buildStages[idx]), state: 'canceled'
	})
}






// notify gitlab pending stages
def gitlabBuildList = []
buildStages.each { elem ->
	gitlabBuildList.add( gitlabBuildStage(elem) )
}
gitlabBuilds(builds: gitlabBuildList) {


// podinit stage start
stageRunning('podinit')

try {

	podTemplate(label: 'jenkins-slave-pod', 
		containers: [
			containerTemplate(
				name: 'build-container',
				image: 'gradle:6.8.3-jdk11',
				command: 'cat',
				ttyEnabled: true,
				envVars: [
					containerEnvVar(key: 'GRADLE_HOME', value: '/opt/gradle/')
				]
			),
			containerTemplate(
				name: 'push-container',
				image: 'docker',
				command: 'cat',
				ttyEnabled: true
			),
		],
		volumes: [ 
			hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'), 
		]) {



	node('jenkins-slave-pod') {
		// podinit finished
		stageSuccess('podinit')


		// checkout stage
		runStage('checkout', {
			checkout scm
		})




		// build stage
		runStage('build', {
			container('build-container') {

				// parallel build
				parallel 'build-submodule-01' : {
					echo '- Build Submodule 01'
					sh '''#!/bin/bash
						./gradlew build --stacktrace -x test
					'''
					echo '- Build Submodule 01 finished!'
				}, 'build-submodule-02 (dummy)' : {
					echo '- Build Submodule 02'
					sh '''#!/bin/bash
						./gradlew -v
						echo dummy build script 1
					'''
					echo '- Build Submodule 02 finished!'
				}, 'build-submodule-03 (dummy)' : {
					echo '- Build Submodule 03'
					sh '''#!/bin/bash
						./gradlew -v
						echo dummy build script 2
					'''
					echo '- Build Submodule finished!'
				}
			}
		})
			



		// test stage
		runStage('test', {
			container('build-container') {
				// parallel test
				parallel 'test-ApiTest' : {
					echo '- Unit Test 01'
					sh './gradlew test --stacktrace --tests="net.hwkim.apigw.ApiTest"'
				}, 'test-HelloSpringTest' : {
					echo '- Unit Test 02'
					sh './gradlew test --stacktrace --tests="net.hwkim.apigw.HelloSpringTest"'
				}
			} // container
		})



		// push stage
		runStage('push', {
			container('push-container') {

				echo '- Push'
				sleep 5

			}
		})




	//		docker.image('push-container').inside {
	//			echo 'Notify to GitLab - test stage running'
	//			updateGitlabCommitStatus name: '03-test', state: 'running'
	//
	//			echo '- Test'
	//			sleep 10
	//			sh 'touch tmplog; cat tmplog; echo "C" > tmplog'
	//
	//			echo 'Notify to GitLab - test stage success'
	//			updateGitlabCommitStatus name: '03-test', state: 'success'
	//		}
	//				
	//		docker.image('push-container').inside {
	//			sh 'touch tmplog; cat tmplog; echo "D" > tmplog'
	//		}




	} // node

	} // podTemplate

} catch (error) {
	
	stageFailed('podinit')
}



} // gitlabBuilds
